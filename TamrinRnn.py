# -*- coding: utf-8 -*-
"""TAMRINRNN.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aUs-XleMxvu8b1MOtfZilbvXlFAKUyLu
"""

import csv
import json

input_file = "/content/drive/MyDrive/shabakeasaby/amazon ratings_Digital_Music.json"
input_json = open(input_file, "r", encoding="utf-8")

output_file = "reviews_Clothing_Shoes_and_Jewelry_5.csv"
with open(output_file, "w", encoding="utf-8") as output_csv:
    csv_writer = csv.writer(output_csv)
    flag = 0
    for line in input_json.readlines():
        dic = json.loads(line)
        # writing headline in the beginning
        if flag == 0:
            csv_writer.writerow(dic)
            flag = 1
        csv_writer.writerow(dic.values())

print("Done")

import pandas as pd
import string

input_data = pd.read_csv("/content/drive/MyDrive/shabakeasaby/amazon ratings_Digital_Music.json")
input_data['overall'] = input_data['overall'].astype(object) # fix datatype error
input_data['reviewText'] = input_data['reviewText'].astype(object) # fix datatype error

dataset = {"reviewText": input_data["reviewText"], "overall": input_data["overall"]  }
dataset = pd.DataFrame(data = dataset)
dataset = dataset.dropna()

dataset = dataset[dataset["overall"] != '3'] # need datatype=object
dataset["label"] = dataset["overall"].apply(lambda rating : +1 if str(rating) > '3' else -1)

from sklearn.model_selection import train_test_split

X = pd.DataFrame(dataset, columns = ["reviewText_clean"])
y = pd.DataFrame(dataset, columns = ["label"])

train_X, test_X, trian_y, test_y = train_test_split(X, y, random_state=50)

from sklearn.feature_extraction.text import CountVectorizer

train_X = ["John likes to watch movies",
           "Mary likes movies too", 
           "Joe only likes horror movies and action movies"]

vectorizer = CountVectorizer(token_pattern=r'\b\w+\b') # take a word as a token.
train_vector = vectorizer.fit_transform(train_X) # Learn the vocabulary dictionary and return term-document matrix.
token_set = vectorizer.get_feature_names() # the vocabulary dictionary: ['action', 'and', 'horror', 'joe', 'john', 'likes', 'mary', 'movies', 'only', 'to', 'too', 'watch']
print(train_vector) 
'''
  (0, 7)	1
  (0, 11)	1
  (0, 9)	1
  (0, 5)	1
  (0, 4)	1
  (1, 10)	1
  (1, 6)	1
  (1, 7)	1
  (1, 5)	1
  (2, 0)	1
  (2, 1)	1
  (2, 2)	1
  (2, 8)	1
  (2, 3)	1
  (2, 7)	2
  (2, 5)	1
'''

from sklearn.feature_extraction.text import CountVectorizer

train_X = ["John likes to watch movies",
           "Mary likes movies too", 
           "Joe only likes horror movies and action movies"]

vectorizer = CountVectorizer(token_pattern=r'\b\w+\b') # take a word as a token.
train_vector = vectorizer.fit_transform(train_X) # Learn the vocabulary dictionary and return term-document matrix.
token_set = vectorizer.get_feature_names() # the vocabulary dictionary: ['action', 'and', 'horror', 'joe', 'john', 'likes', 'mary', 'movies', 'only', 'to', 'too', 'watch']

test_X = ["Jay likes romantic movies"]
test_vector = vectorizer.transform(test_X)
print(test_vector)
'''
  (0, 5)	1
  (0, 7)	1
'''

from sklearn.feature_extraction.text import CountVectorizer

vectorizer = CountVectorizer(token_pattern=r'\b\w+\b')
train_vector = vectorizer.fit_transform(train_X["reviewText"])
test_vector = vectorizer.transform(test_X["reviewText"])

from sklearn.linear_model import LogisticRegression

clr = LogisticRegression()
clr.fit(train_vector, trian_y.values.ravel())
scores = clr.score(test_vector, test_y) # accuracy
print(scores)